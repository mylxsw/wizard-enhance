package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/coll"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

	// AddAttachmentGlobalScope assign a global scope to a model for soft delete
	AddGlobalScopeForAttachment("soft_delete", func(builder query.Condition) {
		builder.WhereNull("deleted_at")
	})

}

// Attachment is a Attachment object
type Attachment struct {
	original        *attachmentOriginal
	attachmentModel *AttachmentModel

	Id          null.Int
	Name        null.String
	Path        null.String
	UserId      null.Int
	PageId      null.Int
	ProjectId   null.Int
	PreviewPath null.String
	FileType    null.String
	CreatedAt   null.Time
	UpdatedAt   null.Time
	DeletedAt   null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *Attachment) As(dst interface{}) error {
	return coll.CopyProperties(inst, dst)
}

// SetModel set model for Attachment
func (inst *Attachment) SetModel(attachmentModel *AttachmentModel) {
	inst.attachmentModel = attachmentModel
}

// attachmentOriginal is an object which stores original Attachment from database
type attachmentOriginal struct {
	Id          null.Int
	Name        null.String
	Path        null.String
	UserId      null.Int
	PageId      null.Int
	ProjectId   null.Int
	PreviewPath null.String
	FileType    null.String
	CreatedAt   null.Time
	UpdatedAt   null.Time
	DeletedAt   null.Time
}

// Staled identify whether the object has been modified
func (inst *Attachment) Staled() bool {
	if inst.original == nil {
		inst.original = &attachmentOriginal{}
	}

	if inst.Id != inst.original.Id || inst.Id.ValueOrZero() != inst.original.Id.ValueOrZero() || inst.Id.IsZero() != inst.original.Id.IsZero() {
		return true
	}
	if inst.Name != inst.original.Name || inst.Name.ValueOrZero() != inst.original.Name.ValueOrZero() || inst.Name.IsZero() != inst.original.Name.IsZero() {
		return true
	}
	if inst.Path != inst.original.Path || inst.Path.ValueOrZero() != inst.original.Path.ValueOrZero() || inst.Path.IsZero() != inst.original.Path.IsZero() {
		return true
	}
	if inst.UserId != inst.original.UserId || inst.UserId.ValueOrZero() != inst.original.UserId.ValueOrZero() || inst.UserId.IsZero() != inst.original.UserId.IsZero() {
		return true
	}
	if inst.PageId != inst.original.PageId || inst.PageId.ValueOrZero() != inst.original.PageId.ValueOrZero() || inst.PageId.IsZero() != inst.original.PageId.IsZero() {
		return true
	}
	if inst.ProjectId != inst.original.ProjectId || inst.ProjectId.ValueOrZero() != inst.original.ProjectId.ValueOrZero() || inst.ProjectId.IsZero() != inst.original.ProjectId.IsZero() {
		return true
	}
	if inst.PreviewPath != inst.original.PreviewPath || inst.PreviewPath.ValueOrZero() != inst.original.PreviewPath.ValueOrZero() || inst.PreviewPath.IsZero() != inst.original.PreviewPath.IsZero() {
		return true
	}
	if inst.FileType != inst.original.FileType || inst.FileType.ValueOrZero() != inst.original.FileType.ValueOrZero() || inst.FileType.IsZero() != inst.original.FileType.IsZero() {
		return true
	}
	if inst.CreatedAt != inst.original.CreatedAt || inst.CreatedAt.ValueOrZero() != inst.original.CreatedAt.ValueOrZero() || inst.CreatedAt.IsZero() != inst.original.CreatedAt.IsZero() {
		return true
	}
	if inst.UpdatedAt != inst.original.UpdatedAt || inst.UpdatedAt.ValueOrZero() != inst.original.UpdatedAt.ValueOrZero() || inst.UpdatedAt.IsZero() != inst.original.UpdatedAt.IsZero() {
		return true
	}
	if inst.DeletedAt != inst.original.DeletedAt || inst.DeletedAt.ValueOrZero() != inst.original.DeletedAt.ValueOrZero() || inst.DeletedAt.IsZero() != inst.original.DeletedAt.IsZero() {
		return true
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *Attachment) StaledKV() query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &attachmentOriginal{}
	}

	if inst.Id != inst.original.Id || inst.Id.ValueOrZero() != inst.original.Id.ValueOrZero() || inst.Id.IsZero() != inst.original.Id.IsZero() {
		kv["id"] = inst.Id
	}
	if inst.Name != inst.original.Name || inst.Name.ValueOrZero() != inst.original.Name.ValueOrZero() || inst.Name.IsZero() != inst.original.Name.IsZero() {
		kv["name"] = inst.Name
	}
	if inst.Path != inst.original.Path || inst.Path.ValueOrZero() != inst.original.Path.ValueOrZero() || inst.Path.IsZero() != inst.original.Path.IsZero() {
		kv["path"] = inst.Path
	}
	if inst.UserId != inst.original.UserId || inst.UserId.ValueOrZero() != inst.original.UserId.ValueOrZero() || inst.UserId.IsZero() != inst.original.UserId.IsZero() {
		kv["user_id"] = inst.UserId
	}
	if inst.PageId != inst.original.PageId || inst.PageId.ValueOrZero() != inst.original.PageId.ValueOrZero() || inst.PageId.IsZero() != inst.original.PageId.IsZero() {
		kv["page_id"] = inst.PageId
	}
	if inst.ProjectId != inst.original.ProjectId || inst.ProjectId.ValueOrZero() != inst.original.ProjectId.ValueOrZero() || inst.ProjectId.IsZero() != inst.original.ProjectId.IsZero() {
		kv["project_id"] = inst.ProjectId
	}
	if inst.PreviewPath != inst.original.PreviewPath || inst.PreviewPath.ValueOrZero() != inst.original.PreviewPath.ValueOrZero() || inst.PreviewPath.IsZero() != inst.original.PreviewPath.IsZero() {
		kv["preview_path"] = inst.PreviewPath
	}
	if inst.FileType != inst.original.FileType || inst.FileType.ValueOrZero() != inst.original.FileType.ValueOrZero() || inst.FileType.IsZero() != inst.original.FileType.IsZero() {
		kv["file_type"] = inst.FileType
	}
	if inst.CreatedAt != inst.original.CreatedAt || inst.CreatedAt.ValueOrZero() != inst.original.CreatedAt.ValueOrZero() || inst.CreatedAt.IsZero() != inst.original.CreatedAt.IsZero() {
		kv["created_at"] = inst.CreatedAt
	}
	if inst.UpdatedAt != inst.original.UpdatedAt || inst.UpdatedAt.ValueOrZero() != inst.original.UpdatedAt.ValueOrZero() || inst.UpdatedAt.IsZero() != inst.original.UpdatedAt.IsZero() {
		kv["updated_at"] = inst.UpdatedAt
	}
	if inst.DeletedAt != inst.original.DeletedAt || inst.DeletedAt.ValueOrZero() != inst.original.DeletedAt.ValueOrZero() || inst.DeletedAt.IsZero() != inst.original.DeletedAt.IsZero() {
		kv["deleted_at"] = inst.DeletedAt
	}

	return kv
}

// Save create a new model or update it
func (inst *Attachment) Save() error {
	if inst.attachmentModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.attachmentModel.SaveOrUpdate(*inst)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a attachment
func (inst *Attachment) Delete() error {
	if inst.attachmentModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.attachmentModel.DeleteById(inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *Attachment) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type attachmentScope struct {
	name  string
	apply func(builder query.Condition)
}

var attachmentGlobalScopes = make([]attachmentScope, 0)
var attachmentLocalScopes = make([]attachmentScope, 0)

// AddGlobalScopeForAttachment assign a global scope to a model
func AddGlobalScopeForAttachment(name string, apply func(builder query.Condition)) {
	attachmentGlobalScopes = append(attachmentGlobalScopes, attachmentScope{name: name, apply: apply})
}

// AddLocalScopeForAttachment assign a local scope to a model
func AddLocalScopeForAttachment(name string, apply func(builder query.Condition)) {
	attachmentLocalScopes = append(attachmentLocalScopes, attachmentScope{name: name, apply: apply})
}

func (m *AttachmentModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range attachmentGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range attachmentLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *AttachmentModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *AttachmentModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type AttachmentPlain struct {
	Id          int64
	Name        string
	Path        string
	UserId      int
	PageId      int
	ProjectId   int
	PreviewPath string
	FileType    string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	DeletedAt   time.Time
}

func (w AttachmentPlain) ToAttachment() Attachment {
	return Attachment{

		Id:          null.IntFrom(int64(w.Id)),
		Name:        null.StringFrom(w.Name),
		Path:        null.StringFrom(w.Path),
		UserId:      null.IntFrom(int64(w.UserId)),
		PageId:      null.IntFrom(int64(w.PageId)),
		ProjectId:   null.IntFrom(int64(w.ProjectId)),
		PreviewPath: null.StringFrom(w.PreviewPath),
		FileType:    null.StringFrom(w.FileType),
		CreatedAt:   null.TimeFrom(w.CreatedAt),
		UpdatedAt:   null.TimeFrom(w.UpdatedAt),
		DeletedAt:   null.TimeFrom(w.DeletedAt),
	}
}

// As convert object to other type
// dst must be a pointer to struct
func (w AttachmentPlain) As(dst interface{}) error {
	return coll.CopyProperties(w, dst)
}

func (w *Attachment) ToAttachmentPlain() AttachmentPlain {
	return AttachmentPlain{

		Id:          w.Id.Int64,
		Name:        w.Name.String,
		Path:        w.Path.String,
		UserId:      int(w.UserId.Int64),
		PageId:      int(w.PageId.Int64),
		ProjectId:   int(w.ProjectId.Int64),
		PreviewPath: w.PreviewPath.String,
		FileType:    w.FileType.String,
		CreatedAt:   w.CreatedAt.Time,
		UpdatedAt:   w.UpdatedAt.Time,
		DeletedAt:   w.DeletedAt.Time,
	}
}

// AttachmentModel is a model which encapsulates the operations of the object
type AttachmentModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var attachmentTableName = "wz_attachments"

func SetAttachmentTable(tableName string) {
	attachmentTableName = tableName
}

// NewAttachmentModel create a AttachmentModel
func NewAttachmentModel(db query.Database) *AttachmentModel {
	return &AttachmentModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           attachmentTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *AttachmentModel) GetDB() query.Database {
	return m.db.GetDB()
}

// WithTrashed force soft deleted models to appear in a result set
func (m *AttachmentModel) WithTrashed() *AttachmentModel {
	return m.WithoutGlobalScopes("soft_delete")
}

func (m *AttachmentModel) clone() *AttachmentModel {
	return &AttachmentModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *AttachmentModel) WithoutGlobalScopes(names ...string) *AttachmentModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *AttachmentModel) WithLocalScopes(names ...string) *AttachmentModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *AttachmentModel) Condition(builder query.SQLBuilder) *AttachmentModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *AttachmentModel) Find(id int64) (Attachment, error) {
	return m.First(m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *AttachmentModel) Exists(builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *AttachmentModel) Count(builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *AttachmentModel) Paginate(page int64, perPage int64, builders ...query.SQLBuilder) ([]Attachment, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *AttachmentModel) Get(builders ...query.SQLBuilder) ([]Attachment, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"name",
			"path",
			"user_id",
			"page_id",
			"project_id",
			"preview_path",
			"file_type",
			"created_at",
			"updated_at",
			"deleted_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "name":
			selectFields = append(selectFields, f)
		case "path":
			selectFields = append(selectFields, f)
		case "user_id":
			selectFields = append(selectFields, f)
		case "page_id":
			selectFields = append(selectFields, f)
		case "project_id":
			selectFields = append(selectFields, f)
		case "preview_path":
			selectFields = append(selectFields, f)
		case "file_type":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		case "deleted_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*Attachment, []interface{}) {
		var attachmentVar Attachment
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &attachmentVar.Id)
			case "name":
				scanFields = append(scanFields, &attachmentVar.Name)
			case "path":
				scanFields = append(scanFields, &attachmentVar.Path)
			case "user_id":
				scanFields = append(scanFields, &attachmentVar.UserId)
			case "page_id":
				scanFields = append(scanFields, &attachmentVar.PageId)
			case "project_id":
				scanFields = append(scanFields, &attachmentVar.ProjectId)
			case "preview_path":
				scanFields = append(scanFields, &attachmentVar.PreviewPath)
			case "file_type":
				scanFields = append(scanFields, &attachmentVar.FileType)
			case "created_at":
				scanFields = append(scanFields, &attachmentVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &attachmentVar.UpdatedAt)
			case "deleted_at":
				scanFields = append(scanFields, &attachmentVar.DeletedAt)
			}
		}

		return &attachmentVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(context.Background(), sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	attachments := make([]Attachment, 0)
	for rows.Next() {
		attachmentReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		attachmentReal.SetModel(m)
		attachments = append(attachments, *attachmentReal)
	}

	return attachments, nil
}

// First return first result for given query
func (m *AttachmentModel) First(builders ...query.SQLBuilder) (Attachment, error) {
	res, err := m.Get(append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return Attachment{}, err
	}

	if len(res) == 0 {
		return Attachment{}, query.ErrNoResult
	}

	return res[0], nil
}

// Create save a new attachment to database
func (m *AttachmentModel) Create(kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all attachments to database
func (m *AttachmentModel) SaveAll(attachments []Attachment) ([]int64, error) {
	ids := make([]int64, 0)
	for _, attachment := range attachments {
		id, err := m.Save(attachment)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a attachment to database
func (m *AttachmentModel) Save(attachment Attachment) (int64, error) {
	return m.Create(attachment.StaledKV())
}

// SaveOrUpdate save a new attachment or update it when it has a id > 0
func (m *AttachmentModel) SaveOrUpdate(attachment Attachment) (id int64, updated bool, err error) {
	if attachment.Id.Int64 > 0 {
		_, _err := m.UpdateById(attachment.Id.Int64, attachment)
		return attachment.Id.Int64, true, _err
	}

	_id, _err := m.Save(attachment)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *AttachmentModel) UpdateFields(kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *AttachmentModel) Update(attachment Attachment, builders ...query.SQLBuilder) (int64, error) {
	return m.UpdateFields(attachment.StaledKV(), builders...)
}

// UpdateById update a model by id
func (m *AttachmentModel) UpdateById(id int64, attachment Attachment) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Update(attachment)
}

// ForceDelete permanently remove a soft deleted model from the database
func (m *AttachmentModel) ForceDelete(builders ...query.SQLBuilder) (int64, error) {
	m2 := m.WithTrashed()

	sqlStr, params := m2.query.Merge(builders...).AppendCondition(m2.applyScope()).Table(m2.tableName).ResolveDelete()

	res, err := m2.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// ForceDeleteById permanently remove a soft deleted model from the database by id
func (m *AttachmentModel) ForceDeleteById(id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).ForceDelete()
}

// Restore restore a soft deleted model into an active state
func (m *AttachmentModel) Restore(builders ...query.SQLBuilder) (int64, error) {
	m2 := m.WithTrashed()
	return m2.UpdateFields(query.KV{
		"deleted_at": nil,
	}, builders...)
}

// RestoreById restore a soft deleted model into an active state by id
func (m *AttachmentModel) RestoreById(id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Restore()
}

// Delete remove a model
func (m *AttachmentModel) Delete(builders ...query.SQLBuilder) (int64, error) {

	return m.UpdateFields(query.KV{
		"deleted_at": time.Now(),
	}, builders...)

}

// DeleteById remove a model by id
func (m *AttachmentModel) DeleteById(id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete()
}
